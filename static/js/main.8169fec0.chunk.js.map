{"version":3,"sources":["NewNoteInput.tsx","App.tsx","Action.ts","reportWebVitals.ts","notesReducer.ts","store.ts","index.tsx"],"names":["NewNoteInput","addNote","useState","note","setNote","type","placeholder","name","value","onChange","event","target","onClick","App","notes","useSelector","state","dispatch","useDispatch","className","payload","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAMaA,EAA4C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACxD,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OACI,gCACI,uBAAOC,KAAK,OAAOC,YAAY,aAAaC,KAAK,OAAOC,MAAOL,EAAMM,SAT1D,SAACC,GAChBN,EAAQM,EAAMC,OAAOH,UASjB,wBAAQI,QAPO,WACnBX,EAAQE,GACRC,EAAQ,KAKJ,kC,MCUGS,MApBf,WACE,IAAMC,EAAQC,aACZ,SAACC,GAAD,OAAWA,EAAMF,SAEbG,EAAWC,cAIjB,OACE,sBAAKC,UAAU,MAAf,4BAEE,cAAC,EAAD,CAAclB,QANA,SAACE,GACjBc,ECbmB,SAACd,GAAD,MAAyB,CAC5CE,KAAM,WACNe,QAASjB,GDWAF,CAAQE,OAMf,uBACA,6BACGW,EAAMO,KAAI,SAAClB,GAAW,OAAO,6BAAgBA,GAAPA,YERhCmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCJRQ,EAAa,CACfjB,MAAM,ICHGkB,EAAQC,aDMK,WAAiD,IAAhDjB,EAA+C,uDAA9Be,EAAcG,EAAgB,uCACvE,OAAOA,EAAO7B,MACV,IAAK,WACD,OAAO,2BACAW,GADP,IAEIF,MAAM,GAAD,mBAAKE,EAAMF,OAAX,CAAkBoB,EAAOd,YAGtC,QACA,OAAOJ,MEVdmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGFM,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.8169fec0.chunk.js","sourcesContent":["import React, { useState, ChangeEvent } from 'react'\r\n\r\ninterface NewNoteInputProps {\r\n    addNote(note: string): void;\r\n}\r\n\r\nexport const NewNoteInput: React.FC<NewNoteInputProps> = ({ addNote }) => {\r\n    const [note, setNote] = useState(\"\");\r\n    const updateNote = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNote(event.target.value);\r\n    }\r\n    const onAddNoteClick = () => {\r\n        addNote(note);\r\n        setNote('');\r\n    }\r\n    return (\r\n        <div>\r\n            <input type=\"text\" placeholder=\"Enter Note\" name=\"note\" value={note} onChange={updateNote} />\r\n            <button onClick={onAddNoteClick}>Add Note âž• </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NewNoteInput;\r\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NewNoteInput } from './NewNoteInput';\nimport { NotesState } from './notesReducer';\nimport { addNote } from './Action';\nimport './App.css';\n\n\nfunction App() {\n  const notes = useSelector<NotesState, NotesState[\"notes\"]>(\n    (state) => state.notes\n  )\n  const dispatch = useDispatch();\n  const onAddNote = (note: string) => {\n    dispatch(addNote(note));\n  }\n  return (\n    <div className=\"App\">\n      Note Taking App\n      <NewNoteInput addNote={onAddNote} />\n      <hr />\n      <ul>\n        {notes.map((note) => { return <li key={note}>{note}</li> })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","export type Action = {type:\"ADD_NOTE\"; payload:string};\r\nexport const addNote = (note:string): Action =>({\r\n    type: \"ADD_NOTE\",\r\n    payload: note,\r\n});","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Action} from './Action'\r\n\r\nexport interface NotesState{\r\n    notes: string[];\r\n}\r\nconst initialState={\r\n    notes:[],\r\n}\r\n\r\nexport const notesReducer=(state:NotesState=initialState, action:Action)=>{\r\n   switch(action.type){\r\n       case \"ADD_NOTE\":{\r\n           return {\r\n               ...state,\r\n               notes:[...state.notes, action.payload]\r\n           };\r\n       }\r\n       default:\r\n       return state;\r\n   }\r\n};","import {createStore} from 'redux';\r\nimport {notesReducer} from './notesReducer';\r\n\r\nexport const store = createStore(notesReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './store';\n \nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}